
export const diagnostics_ts: string = "import * as tsMorph from 'ts-morph'\n\nexport default class implements PackedExample {\n  execute(input: {files: { filePath: string; content: string }[]}) {\n    const project = new tsMorph.Project()\n    input.files.forEach(f=>project.createSourceFile(f.filePath, f.content))\n    const base = project.createSourceFile('base.ts', '')\n    // we create a base dummy source file to calculate the relative paths\n    const text = project.getSourceFiles()\n    .filter(f=>f.getBaseName()!=='base.ts')\n    .map(f=>\n      ({text: this.buildJsxAstDiagnostics(f)\n        .map(d=>`\n * ${d.code} ${d.file ? base.getRelativePathTo(d.file) : 'unknown file'}:${d.startLineNumber}:${d.startColumn} \"${d.message}\"\n          `.trim()).join('\\n') \n          , f}))\n    .flat()\n    .filter(e=>e.text.trim())\n    .map(e=>`\n${base.getRelativePathTo(e.f)}:\n${e.text}\n`.trim())\n.join(`\\n\\n--------------------------------------------\\n`)\n    return { text }\n  }\n\nprivate buildJsxAstDiagnostics(f: tsMorph.SourceFile)  {\n  // const f = project.getSourceFiles().find(s => s.getFilePath().endsWith('t1.tsx'))!\n  return f.getPreEmitDiagnostics().filter(d=>d && d.compilerObject && d.getSourceFile()).map(d => ({\n    message: tsMorph.ts.flattenDiagnosticMessageText(d.compilerObject.messageText, '\\n'),\n    code: d.getCode(),\n    file: d.getSourceFile(),\n    length: d.getLength(),\n    lineNumber: d.getLineNumber(),\n    start: d.getStart(),\n    startColumn: tsMorph.ts.getLineAndCharacterOfPosition(d.getSourceFile()!.compilerNode, d.getStart()!).character + 1,\n    startLineNumber:tsMorph.ts.getLineAndCharacterOfPosition(d.getSourceFile()!.compilerNode, d.getStart()!).line + 1,\n    endColumn: \n    tsMorph.ts.getLineAndCharacterOfPosition(d.getSourceFile()!.compilerNode, d.getStart()! + d.getLength()!)\n        .character + 1,\n    endLineNumber:\n    tsMorph.ts.getLineAndCharacterOfPosition(d.getSourceFile()!.compilerNode, d.getStart()! + d.getLength()!).line +\n      1,\n  }))\n}\n\n  filePath = '/examples/diagnostics.ts'\n  name = 'Project Diagnostics'\n  description = 'Extract project\\'s diagnostics information with positions compatible with monaco-editor'\n  content = diagnostics_ts\n  selected = false\n}\n\nimport { PackedExample } from '../packedExamples'\nimport { diagnostics_ts } from '../packed/diagnostics_ts';\n\n";
