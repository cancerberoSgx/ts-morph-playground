export const printAst_ts: string =
  "import Project, { Node, TypeGuards } from 'ts-morph'\nimport { State } from '../../store/types'\nimport { PackedExample } from '../packedExamples';\nimport { printAst_ts } from './printAst_ts';\n\nexport default class implements PackedExample {\n\n  execute(state: State) {\n    const project = new Project()\n    const selected = state.files.find(f => !!f.selected)\n    const sourceFiles = (selected ? [selected] : state.files).map(f => project.createSourceFile(f.filePath, f.content))\n    const printed = sourceFiles.map(f => ({ name: f.getFilePath(), ast: this.printDescendants(f, 0) }))\n    console.log(printed)\n    const text = printed\n      .map(p => `\n  ${p.name}\n  --------------\n  \n  ${p.ast}\n  `\n      ).join('')\n\n    return { text }\n  }\n  \n  filePath = 'examples/printAst.ts'\n  name = 'print AST'\n  description = 'Prints a textual AST representation of selected file or all of none selected'\n  content=printAst_ts\n  private printDescendants(n: Node, level: number) {\n    let s = this.printNode(n, level) + '\\n'\n    n.forEachChild(c => (s += this.printDescendants(c, level + 1)))\n    return s\n  }\n  \n  private indent(i: number = 1, tabSize = 2): string {\n    return new Array(i * tabSize).fill(' ').join('')\n  }\n\n  private printNode(n: Node, level: number) {\n    const name = TypeGuards.isNameableNode(n) ? n.getName() : ''\n    const kind = n.getKindName()\n    const text = n\n      .getText()\n      .substring(0, Math.min(30, n.getText().length))\n      .trim()\n      .replace(/\\n/g, '')\n    return `${this.indent(level)} ${name} ${kind} ${text}`\n  }\n\n}\n"
