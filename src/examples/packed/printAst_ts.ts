
export const printAst_ts: string = "import * as tsMorph from 'ts-morph'\n\nexport default class implements PackedExample {\n  execute(files: File[]) {\n    const project = new tsMorph.Project()\n    const text = files\n      .filter(f => (files.find(f => !!f.selected) ? f.selected : true))\n      .map(f => project.createSourceFile(f.filePath, f.content))\n      .map(f => ({ name: f.getFilePath(), ast: printAst(f, 0) }))\n      .map(\n        p => `\n${p.name}\n--------------\n\n${p.ast}\n`\n      )\n      .join('')\n      .trim()\n\n    return { text }\n\n    function printAst(n: tsMorph.Node, level: number) {\n      let s = printNode(n, level) + '\\n'\n      n.forEachChild(c => (s += printAst(c, level + 1)))\n      return s\n    }\n    function indent(i: number = 0, tabSize = 2): string {\n      return new Array(i * tabSize).fill(' ').join('')\n    }\n    function printNode(n: tsMorph.Node, level: number) {\n      const name = tsMorph.TypeGuards.isNameableNode(n) ? n.getName() : ''\n      const kind = n.getKindName()\n      const text = n\n        .getText()\n        .substring(0, Math.min(30, n.getText().length))\n        .trim()\n        .replace(/\\n/g, '')\n      return `${indent(level)} ${name} ${kind} ${text}`\n    }\n  }\n\n  filePath = '/src/examples/printAst.ts'\n  name = 'Print AST'\n  description = 'Prints a textual AST representation of selected file or all files of none selected'\n  content = printAst_ts\n}\n\ninterface File {\n  filePath: string\n  content: string\n  selected?: boolean\n  selection?: {\n    endColumn: number\n    endLineNumber: number\n    startColumn: number\n    startLineNumber: number\n  }\n}\n\nimport { PackedExample } from '../packedExamples'\nimport { printAst_ts } from '../packed/printAst_ts'\n";
